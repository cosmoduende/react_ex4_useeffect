{"ast":null,"code":"var _jsxFileName = \"/Users/Alex/Desktop/Curso_React_2021/curso_react/ex4_useEffect/src/App.js\";\nimport { useState, Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    console.log(\"Aquí entra constructor\");\n    this.state = {\n      name: \"\"\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"Aquí entra DidMount\");\n  }\n\n  componentDidUpdate() {\n    console.log(\"Aquí entra DidUpdate\");\n  } // mostrar hasta aquí para enfatizar que DidUpdate no se ve en console porque no\n  // hay alguna actualización de estado, es decir, hata aquí el html sin el input, añadir después de mostrar\n  // y también añadir hasta entonces la definición del state línea 8 dentro de constructor()\n\n\n  shouldComponentUpdate() {\n    return true;\n  } // después de añadir el shouldComponent, mostrar cómo en false evita que venga un DidUpdate\n  // mostrar como con Snapshot capturamos en consola el estado previo de lo escrito en el input\n\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log(prevProps, prevState);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hola\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: this.state.name,\n        onChange: ({\n          target: {\n            value\n          }\n        }) => this.setState({\n          name: value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Alex/Desktop/Curso_React_2021/curso_react/ex4_useEffect/src/App.js"],"names":["useState","Component","App","constructor","props","console","log","state","name","componentDidMount","componentDidUpdate","shouldComponentUpdate","getSnapshotBeforeUpdate","prevProps","prevState","render","target","value","setState"],"mappings":";AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA2B;AAEzBE,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAE;AACjBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;;AAEDI,EAAAA,kBAAkB,GAAE;AAClBL,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,GAhBwB,CAkBzB;AACA;AACA;;;AAEAK,EAAAA,qBAAqB,GAAE;AACrB,WAAO,IAAP;AACD,GAxBwB,CA0BzB;AAEA;;;AAEAC,EAAAA,uBAAuB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AAC3CT,IAAAA,OAAO,CAACC,GAAR,CAAYO,SAAZ,EAAuBC,SAAvB;AACD;;AAEDC,EAAAA,MAAM,GAAE;AACN,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAO,QAAA,KAAK,EAAE,KAAKR,KAAL,CAAWC,IAAzB;AAA+B,QAAA,QAAQ,EAAE,CAAC;AAACQ,UAAAA,MAAM,EAAG;AAACC,YAAAA;AAAD;AAAV,SAAD,KAAwB,KAAKC,QAAL,CAAc;AAACV,UAAAA,IAAI,EAAGS;AAAR,SAAd;AAAjE;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AA3CwB;;AA+C3B,eAAef,GAAf","sourcesContent":["import {useState, Component} from \"react\";\n\nclass App extends Component{\n  \n  constructor(props){\n    super(props);\n    console.log(\"Aquí entra constructor\")\n    this.state = {\n      name: \"\",\n    };\n  }\n\n  componentDidMount(){\n    console.log(\"Aquí entra DidMount\");\n  }\n\n  componentDidUpdate(){\n    console.log(\"Aquí entra DidUpdate\");\n  }\n\n  // mostrar hasta aquí para enfatizar que DidUpdate no se ve en console porque no\n  // hay alguna actualización de estado, es decir, hata aquí el html sin el input, añadir después de mostrar\n  // y también añadir hasta entonces la definición del state línea 8 dentro de constructor()\n\n  shouldComponentUpdate(){\n    return true;\n  }\n\n  // después de añadir el shouldComponent, mostrar cómo en false evita que venga un DidUpdate\n\n  // mostrar como con Snapshot capturamos en consola el estado previo de lo escrito en el input\n\n  getSnapshotBeforeUpdate(prevProps, prevState){\n    console.log(prevProps, prevState);\n  }\n\n  render(){\n    return(\n      <div>\n        <h1>\n          Hola\n        </h1>\n        <input value={this.state.name} onChange={({target : {value}}) => this.setState({name : value})}></input>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}